//
//  Header.pch
//  LAMB Wallet
//
//  Created by fei on 2020/10/26.
//  Copyright © 2020 fei. All rights reserved.
//

#ifndef Header_pch
#define Header_pch

#ifdef __OBJC__

    #import "UIDeviceEx.h"
    #import "GlobalDefineHeader.h"
    #import "LambNetManager.h"
    #import "LambNodeManager.h"
    #import <CoreBitcoin/CoreBitcoin.h>
    #import "ASSendTextModel.h"
#endif

#define DeviceModelName [UIDevice deviceModelName]

/// 屏幕高
#define kScreenH ([[UIScreen mainScreen] bounds].size.height)
/// 屏幕宽
#define kScreenW ([[UIScreen mainScreen] bounds].size.width)

/// 从右侧划出view类型动画 左侧露出的距离(左侧列表被掩盖时，露出的宽度)

/// 判断是否为retina屏幕

/// 是否iPad
#define kll_isiPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)

/// 判断系统版本
#define kll_moreThanOS9  ([[[UIDevice currentDevice] systemVersion] floatValue] >= 9.0)

//NSNull判断
/// 判断NSString, NSArrsy, NSDictionary, NSSet, NSNumber
#define kll_IsString(__string) ([(__string) isKindOfClass:[NSString class]])
#define kll_IsStringWithAnyText(__string) (kll_IsString(__string) && ([((NSString *)__string) length] > 0))

//数组判断
#define kll_IsArray(__array) ([(__array) isKindOfClass:[NSArray class]])
#define kll_IsArrayWithAnyItem(__array) (kll_IsArray(__array) && ([((NSArray *)__array) count] > 0))

//字典判断
#define kll_IsDictionary(__dict) ([(__dict) isKindOfClass:[NSDictionary class]])
#define kll_IsDictionaryWithAnyKeyValue(__dict) (kll_IsDictionary(__dict) && ([[((NSDictionary *)__dict) allKeys] count] > 0))

// NSNumber判断

#if TARGET_IPHONE_SIMULATOR

// 是否为iPhoneX
#define kll_isiPhonex ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125.0f, 2436.0f), [[UIScreen mainScreen] currentMode].size) : NO)
//判断iPHoneXr
#define kll_isiPhoneXR ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(828, 1792), [[UIScreen mainScreen] currentMode].size) && !kll_isiPad : NO)
//判断iPhoneXs
#define kll_isiPhoneXS ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1125, 2436), [[UIScreen mainScreen] currentMode].size) && !kll_isiPad : NO)
//判断iPhoneXs Max
#define kll_isiPhoneXSMax ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(1242, 2688), [[UIScreen mainScreen] currentMode].size) && !kll_isiPad : NO)
//判断iPhone 11
#define kll_isiPhone11 kll_isiPhoneXR
//判断iPhone 11 Pro
#define kll_isiPhone11Pro kll_isiPhoneXS
//判断iPhone 11 Pro Max
#define kll_isiPhone11ProMax kll_isiPhoneXSMax

#else

// 是否为iPhoneX
#define kll_isiPhonex [DeviceModelName isEqualToString:@"iPhone X"]
//判断iPHoneXr
#define kll_isiPhoneXR [DeviceModelName isEqualToString:@"iPhone XR"]
//判断iPhoneXs
#define kll_isiPhoneXS [DeviceModelName isEqualToString:@"iPhone XS"]
//判断iPhoneXs Max
#define kll_isiPhoneXSMax [DeviceModelName isEqualToString:@"iPhone XS Max"]
//判断iPhone 11
#define kll_isiPhone11 [DeviceModelName isEqualToString:@"iPhone 11"]
//判断iPhone 11 Pro
#define kll_isiPhone11Pro [DeviceModelName isEqualToString:@"iPhone 11 Pro"]
//判断iPhone 11 Pro Max
#define kll_isiPhone11ProMax [DeviceModelName isEqualToString:@"iPhone 11 Pro Max"]

#endif

//是否是刘海屏
#define kll_isBangScreen (kll_isiPhonex || kll_isiPhoneXR || kll_isiPhoneXS || kll_isiPhoneXSMax || kll_isiPhone11 || kll_isiPhone11Pro || kll_isiPhone11ProMax)
// 是否为iPhoneX

/// 状态栏高度
#define kll_StatusBarHeight [[UIApplication sharedApplication] statusBarFrame].size.height

/// 状态栏高度
#define kll_StatusBarNotHiddenHeight (kll_isBangScreen ? 44.0 : 20.0)

/// segment默认高度

/// 导航条高度
#define kll_NavBarHeight 44.0f

/// TabBar高度

/// 状态栏+导航条高度
#define kll_Status_NavBarHeight (kll_StatusBarHeight + kll_NavBarHeight)

/// iPhoneX底部安全区域高度
#define kll_SafeBottomMargin  (kll_isBangScreen ? 34.0f : 0.0f)

/// iPhoneX底部安全区域高度
#define kll_Tabbar_SafeBottomHeight  (kll_SafeBottomMargin + 49)

//一像素高度
#define kll_OnePixel (1.0 / [UIScreen mainScreen].scale)

//自适应 屏幕计算
#define AUTOSIZEIPHONE6(i) ceil(((([UIScreen mainScreen].bounds).size.width*2) / 750) * i)

#define kWeakSelf(weakSelf)  __weak __typeof(&*self) weakSelf = self;

#pragma -- UIViewController  宏定义
#pragma mark - 返回指定的ViewController
#define popToThisContrller(obj,num)  NSArray * viewControllerArray = obj.navigationController.viewControllers;\
UIViewController * controller = [viewControllerArray objectAtIndex:num];\
[obj.navigationController popToViewController:controller animated:YES];
#pragma mark - 跳转到指定的ViewController
#define pushToDestinationController(viewController,DestinationController)\
DestinationController * controller = [[DestinationController alloc] init];\
[viewController.navigationController pushViewController:controller animated:YES];\



#ifdef __OBJC__
#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#import "ASLocalizedManager.h"
#import "UIViewController+Ex.h"
#import "ASHUD.h"
#import <ReactiveObjC/UIControl+RACSignalSupport.h>
#import <ReactiveObjC/RACSignal.h>
#import "ASConst.h"
#import <Masonry.h>
#import <YYCache/YYCache.h>
#import "UIView+Ex.h"


/// long 1585361571000 转换为 2020-03-28 10:12:51
/// @param timeLong 1585361571000
/// @param dateFormat 如 yyyy-MM-dd HH:mm:ss
static inline NSString *timeStrFromLongWithDateFormatStr(long timeLong, NSString *dateFormat) {
    
    long timeSec= timeLong;
    if ([NSString stringWithFormat: @"%ld", timeLong].length == 13) {
        /*
         如果服务器返回的是13位字符串，需要除以1000
         否则显示不正确(13位其实代表的是毫秒，需要除以1000)
         */
        timeSec= timeLong / 1000;
    }
    NSDate *date = [[NSDate alloc]initWithTimeIntervalSince1970:timeSec];
    static NSDateFormatter *timeFormatter = nil;
    if (!timeFormatter) {
        timeFormatter = [[NSDateFormatter alloc]init];
    }
    if (dateFormat.length > 0) {
        [timeFormatter setDateFormat: dateFormat];
    } else {
        [timeFormatter setDateFormat: @"yyyy-MM-dd HH:mm:ss"];
    }
    
    return [timeFormatter stringFromDate: date];
}
/// 是否是x系列
static inline BOOL isIPhoneXSeries() {
    BOOL iPhoneXSeries = NO;
    if (UIDevice.currentDevice.userInterfaceIdiom != UIUserInterfaceIdiomPhone) {
        return iPhoneXSeries;
    }
    
    UIWindow *mainWindow = [[[UIApplication sharedApplication] delegate] window];
    if (mainWindow.safeAreaInsets.bottom > 0.0) {
        iPhoneXSeries = YES;
    }
    
    return iPhoneXSeries;
}


#import "NSString+HexColor.h"
#import "NSString+KBChange.h"
#import "SXCodeTool.h"
#import <YYCategories/UIView+YYAdd.h>
#import <YYCategories/NSString+YYAdd.h>
#import <ReactiveObjC/RACEXTScope.h>
#import "UIColor+ASThemeColor.h"
#import "LambUtils.h"

#define JoinParam(FORMAT, param) [NSString stringWithFormat:FORMAT.copy,param]
#define JoinParams(FORMAT, param1, param2) [NSString stringWithFormat:FORMAT.copy,param1,param2]

// 账户信息接口
#define USER_Get_Auth         @"/auth/accounts/%@"
// 读取余额和用户信息
#define USER_JACKPOT_CHECK         @"/member/userjackpotcheck"
// 获取节点列表
#define HTTP_Get_producers         @"/staking/validators?status=%@"
// 获取节点详情
#define HTTP_Get_producers_details         @"/staking/validators/%@"
// +获取区块信息
#define HTTP_Get_chain_details         @"/node_info"
// 获取全网质押token总量
#define HTTP_Get_chain_all_zhiya_token         @"/staking/pool"
// 获取市场名称列表接口
#define HTTP_Get_markets         @"/market/markets"
// 获取市场相关指标接口
#define HTTP_Get_markets_param         @"/market/params"
// 资产列表
#define HTTP_Get_Asset_Fund_List         @"/asset/all"
// 资产详情
#define HTTP_Get_Asset_Detail         @"/asset/symbol"

// 挖矿详情
#define HTTP_Get_Mining_Detail         @"/asset/fund"
// 资产详情
#define HTTP_Get_Asset_Detail         @"/asset/symbol"
// 我的预挖矿
#define HTTP_Get_Fund_Info_Mine         @"/asset/invest"
//获取预挖矿的gas
#define HTTP_Get_Asset_INVEST         @"/asset/symbol"
// 获取转账gas
#define HTTP_Get_transfer_gas         @"/bank/accounts/"
// 获取提取质押奖励以及节点收益gas
#define HTTP_Get_mining_award_gas         @"/distribution/delegators/"
 

// 获取lammmb兑换tbbgas
#define HTTP_Get_lamb2tbb_gas         @"/asset/pledge"
// 获取tbb兑换lamb gas
#define HTTP_Get_tbb2lamb_gas         @"/asset/drop"
// 获取质押 gas
#define HTTP_Get_zhiya_gas         @"/staking/delegators/"
// 获取购买空间 gas
#define HTTP_Get_buy_store_gas         @"/market/create-buyorder"
// 获取存入押金的gas
#define HTTP_Get_cash_pledge_gas         @"/gov/proposals/"
//转账
#define HTTP_transfer         @"/"
//获取奖励
#define getHTTP_get_award         @"/distribution/delegators/"
//获取节点奖励
#define getHTTP_get_producer_award         @"/distribution/validators/%@"
//获取质押的节点列表
#define getHTTP_get_zhiya_producer         @"/staking/delegators/%@/delegations"
//获取解绑中质押的节点列表
#define getHTTP_get_zhiya_unbonding_producer         @"/staking/delegators/%@/unbonding_delegations"
//获取交易记录
#define getHTTP_get_history         @"/txs?page=10000&%@=%@"

//获取市场优质的卖单
#define getHTTP_get_market_sell         @"/market/sellorders/LambdaMarket/premium/1/100"
//获取节点详情
#define getHTTP_Get_producers_details         @"/staking/validators/"
//获取用户在节点下质押的奖励
#define getHTTP_Get_for_producers_award         @"/distribution/delegators/%@/rewards"
//获取用户在单个节点下质押的奖励
#define getHTTP_Get_for_producers_award_validatorAddr         @"/distribution/delegators/%@/rewards/%@"
//获取用户取消质押的列表
#define getHTTP_Get_cancel_zhiya         @"/staking/delegators/"
//获取用户空间买卖的订单列表接口
#define getHTTP_Get_my_order_store         @"/market/matchorders/"
// +获取提案列表
#define getHTTP_Get_proposal_list         @"/gov/proposals"
// +获取提案详情1《需要5个接口 》
#define getHTTP_Get_proposal_details         @"/gov/proposals/%@"
//获取提案公共参数2
#define getHTTP_Get_proposal_parameters         @"/gov/parameters/deposit"
//获取提案我的押金3
#define getHTTP_Get_proposal_my_yajin         @"/gov/proposals/%@/deposits/%@"
//获取提案我的投票4
#define getHTTP_Get_proposal_my_toupiao         @"/gov/proposals/%@/votes/%@"
//获取提案投票结果5
#define getHTTP_Get_proposal_toupiao         @"/gov/proposals/%@/tally"
//获取交易详情// 发送交易
#define getHTTP_Get_transaction_detail         @"/txs"
//获取交易手续费
#define getHTTP_Get_transaction_Gas         @"/bank/accounts/%@/transfers"




//本地节点
#define kLOCALNODES         @"localNodes"



//打印设置
#ifdef DEBUG  //如果是调试模式，自定义如下： “...代表多个参数”
#define NSLog(FORMAT, ...) printf("%s\n 第%d行 \n %s\n\n", __FUNCTION__, __LINE__,[[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);

#else //如果是发布模式，自定义如下
#define NSLog(...)
#endif

#endif
#endif /* Header_pch */
